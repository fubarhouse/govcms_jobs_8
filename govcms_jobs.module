<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\taxonomy\Entity\Term;
use Drupal\govcms_jobs\GovcmsJobsApiClient;
use Drupal\node\Entity\Node;
use Drupal\Core\Link;
use Drupal\Component\Render\FormattableMarkup;

/**
 * Implement hook_form_node_govcms_jobs_form_alter().
 * Alter form CREATE
 */
function govcms_jobs_form_node_govcms_jobs_form_alter(&$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'govcms_jobs/govcms_jobs';
  govcms_jobs_add_field_groups($form);
  $aps_id = govcms_jobs_set_default_values_from_jsondata($form, $form_state);
  if ($aps_id) {
    $storage = $form_state->getStorage();
    $storage['aps_id'] = $aps_id;
    $form_state->setStorage($storage);
    $form['actions']['submit']['#submit'][] = 'govcms_jobs_update_to_apsjobs';
    $form['#validate'][] = 'govcms_jobs_validate_synchronized';
    if (!govcms_jobs_is_job_synchronized($aps_id)) {
      $msg = new FormattableMarkup('Need sync. Goto @link to pull job', ['@link' => Link::createFromRoute('FAPI page', 'govcms_jobs.fapi')->toString()]);
      \Drupal::messenger()->addError($msg);
    }
  }
  else {
    $form['actions']['submit']['#submit'][] = 'govcms_jobs_create_to_apsjobs';
  }
}

/**
 * Implement hook_form_node_govcms_jobs_edit_form_alter().
 * Alter form EDIT
 */
function govcms_jobs_form_node_govcms_jobs_edit_form_alter(&$form, FormStateInterface $form_state) {
  $form['#attached']['library'][] = 'govcms_jobs/govcms_jobs';
  govcms_jobs_add_field_groups($form);
  $build_info = $form_state->getBuildInfo();
  $callback_object = $build_info['callback_object'];
  $node = $callback_object->getEntity();
  if (!empty($node)) {
    $aps_id = govcms_jobs_get_aps_id_from_current_id('job', $node->id());
    $storage = $form_state->getStorage();
    $storage['aps_id'] = $aps_id;
    $form_state->setStorage($storage);
    $form['actions']['submit']['#submit'][] = 'govcms_jobs_update_to_apsjobs';
    $form['#validate'][] = 'govcms_jobs_validate_synchronized';
    if (!govcms_jobs_is_job_synchronized($aps_id)) {
      $msg = new FormattableMarkup('Need sync. Goto @link to pull job', ['@link' => Link::createFromRoute('FAPI page', 'govcms_jobs.fapi')->toString()]);
      \Drupal::messenger()->addError($msg);
    }
  }
}

/**
 * Implement hook_field_widget_WIDGET_TYPE_form_alter().
 */
function govcms_jobs_field_widget_string_textfield_form_alter(&$element, &$form_state, $context) {
  if ($element['#bundle'] == 'govcms_jobs' && $context['items']->getName() == 'field_locations') {
    $element['value']['#autocomplete_route_name'] = 'govcms_jobs.autocomplete';
    $element['value']['#autocomplete_route_parameters'] = ['field_name' => 'locations', 'count' => 20];
  }
}

/**
 * govcms_jobs_validate_synchronized.
 */
function govcms_jobs_validate_synchronized(&$form, FormStateInterface $form_state) {
  $storage = $form_state->getStorage();
  if (!govcms_jobs_is_job_synchronized($storage['aps_id'])) {
    $msg = new FormattableMarkup('Need sync. Goto @link to pull job', ['@link' => Link::createFromRoute('FAPI page', 'govcms_jobs.fapi')->toString()]);
    $form_state->setErrorByName('', $msg);
  }
}

function govcms_jobs_is_job_synchronized($aps_id) {
  $config = \Drupal::config('govcms_jobs.settings');
  $client = new GovcmsJobsApiClient($config->get('api.base_uri'), $config->get('api.username'), $config->get('api.password'), $config->get('api.authorization'));
  $response = $client->getVacancy($aps_id);
  $stored_data = govcms_jobs_get_job_fetched($aps_id);
  if (!empty($response) && !empty($stored_data)) {
    return $stored_data->changed == $response->result->changed;
  }
  return FALSE;
}

/**
 * govcms_jobs_update_to_apsjobs.
 */
function govcms_jobs_update_to_apsjobs(&$form, FormStateInterface $form_state) {
  $storage = $form_state->getStorage();
  if (empty($storage['aps_id']) || empty($storage['nid'])) {
    return;
  }

  $node = Node::load($storage['nid']);

  $json = govcms_jobs_get_json_data_from_node($node);

  $config = \Drupal::config('govcms_jobs.settings');
  $client = new GovcmsJobsApiClient($config->get('api.base_uri'), $config->get('api.username'), $config->get('api.password'), $config->get('api.authorization'));
  $response = $client->updateVacancy($storage['aps_id'], $json);

  if ($response) {
    $connection = \Drupal::database();
    $connection->update('govcms_jobs_mapping')
      ->fields([
        'data' => $json,
        'current_id' => $storage['nid'],
        'status' => 1,
        'created' => $response->created,
        'changed' => $response->changed,
      ])
      ->condition('type', 'job')
      ->condition('aps_id', $storage['aps_id'])
      ->execute();
  }
  else {
    $job = govcms_jobs_get_job_fetched($storage['aps_id']);
    govcms_jobs_update_node_by_json_data($storage['nid'], json_decode($job->data));
    \Drupal::messenger()->deleteByType('status');
    $form_state->setRebuild();
  }
}

/**
 * govcms_jobs_create_to_apsjobs.
 */
function govcms_jobs_create_to_apsjobs(&$form, FormStateInterface $form_state) {
  $storage = $form_state->getStorage();
  if (empty($storage['nid'])) {
    return;
  }

  $node = Node::load($storage['nid']);

  $json = govcms_jobs_get_json_data_from_node($node);

  $config = \Drupal::config('govcms_jobs.settings');
  $client = new GovcmsJobsApiClient($config->get('api.base_uri'), $config->get('api.username'), $config->get('api.password'), $config->get('api.authorization'));
  $response = $client->createVacancy($json);
  if ($response) {
    $connection = \Drupal::database();
    $connection->insert('govcms_jobs_mapping')
      ->fields([
        'type' => 'job',
        'aps_id' => $response->nid,
        'data' => $json,
        'current_id' => $storage['nid'],
        'status' => 1,
        'created' => $response->created,
        'changed' => $response->changed,
      ])
      ->execute();
  }
  else {
    $node->delete();
    \Drupal::messenger()->deleteByType('status');
    $form_state->setRedirect(\Drupal::routeMatch()->getRouteName(), ['node_type' => 'govcms_jobs']);
  }
}

/**
 * convert term_id to vacancy_id
 */
function govcms_jobs_get_aps_id_from_current_id($type, $id = null) {
  if (empty($id)) {
    return '';
  }
  $query = db_select('govcms_jobs_mapping', 'm')
    ->condition('current_id', $id)
    ->condition('type', $type)
    ->fields('m', array('aps_id'))
    ->execute();
  $result = $query->fetchField();
  return $result;
}

/**
 * govcms_jobs_get_job_fetched.
 */
function govcms_jobs_get_job_fetched($aps_id) {
  $connection = \Drupal::database();
  $query = $connection->select('govcms_jobs_mapping', 'm')
    ->condition('type', 'job')
    ->condition('aps_id', $aps_id)
    ->fields('m');
  return $query->execute()->fetchObject();
}

/**
 * govcms_jobs_get_mapped_id.
 */
function govcms_jobs_get_mapped_id($type, $aps_id) {
  $connection = \Drupal::database();
  $query = $connection->select('govcms_jobs_mapping', 'm')
    ->condition('type', $type)
    ->condition('aps_id', $aps_id)
    ->fields('m', array('current_id'));
  $current_id = $query->execute()->fetchField();
  return $current_id;
}

/**
 * govcms_jobs_add_field_groups.
 */
function govcms_jobs_add_field_groups(&$form) {
  $group_names = [
    'group_agency' => [
      'title' => 'Agency',
      'fields' => [
        'field_publication_date',
        'field_broadband',
        'field_job_levels',
        'field_agencies',
        'field_considered_rr',
      ],
    ],
    'group_position' => [
      'title' => 'Position',
      'fields' => [
        'title',
        'field_job_categories',
        'field_locations',
        'field_position_number',
        'field_clearance_levels',
        'field_salary_min',
        'field_salary_max',
        'field_working_hours',
        'field_engagement_types',
        'field_initiatives_and_programs',
      ],
    ],
    'group_duties' => [
      'title' => 'Duties',
      'fields' => [
        'field_duties',
        'field_eligibility',
        'field_notes',
      ],
    ],
    'group_notice_details' => [
      'title' => 'Notice Details',
      'fields' => [
        'field_under_7_days_check',
        'field_closing_date',
        'field_apply_url',
        'field_contact_name',
        'field_contact_phone',
        'field_contact_email',
        'field_editorial_instruction',
      ],
    ],
    'group_submit' => [
      'title' => 'Submit',
      'fields' => [
        'field_approver',
        'field_moderation',
      ],
    ],
  ];
  $weight = 0;
  foreach ($group_names as $key => $value) {
    $form[$key] = [
      '#type' => 'details',
      '#title' => t($value['title']),
      '#weight' => $weight++,
      '#optional' => TRUE,
      '#open' => TRUE,
    ];
    if ($weight > 1) {
      $form[$key]['#open'] = FALSE;
    }
    foreach ($value['fields'] as $field_name) {
      $form[$field_name]['#group'] = $key;
    }
  }
}

/**
 * govcms_jobs_set_default_values_from_jsondata.
 */
function govcms_jobs_set_default_values_from_jsondata(&$form, FormStateInterface $form_state) {
  $aps_id = \Drupal::request()->query->get('aps_id');
  if (empty($aps_id)) return FALSE;

  $fetched_data = govcms_jobs_get_job_fetched($aps_id);
  if (empty($fetched_data)) return FALSE;

  if (!empty($fetched_data->current_id)) return FALSE;

  $job_values = json_decode($fetched_data->data);

  $time = strtotime($job_values->publication_date->date);
  $publication_date = DrupalDateTime::createFromTimestamp($time);
  $form['field_publication_date']['widget'][0]['value']['#default_value'] = $publication_date;

  if ($job_values->broadband) {
    $form['field_broadband']['widget']['value']['#default_value'] = TRUE;
  }

  $current_job_levels = [];
  foreach ($job_values->job_level as $delta => $aps_tid) {
    $current_job_levels[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $form['field_job_levels']['widget']['#default_value'] = $current_job_levels;

  $form['field_agencies']['widget']['#default_value'] = $job_values->agency;

  if (!$job_values->considered_rr) {
    $form['field_considered_rr']['widget']['#default_value'] = 0;
  }

  $form['title']['widget'][0]['value']['#default_value'] = $job_values->job_title;

  $current_job_cates = [];
  foreach ($job_values->job_category as $delta => $aps_tid) {
    $current_job_cates[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $form['field_job_categories']['widget']['#default_value'] = $current_job_cates;

  foreach ($job_values->locations as $delta => $value) {
    if (!isset($form['field_locations']['widget'][$delta])) {
      $form['field_locations']['widget'][$delta] = $form['field_locations']['widget'][0];
      $form['field_locations']['widget'][$delta]['_weight']['#default_value'] = $delta;
      $form['field_locations']['widget'][$delta]['value']['#delta'] = $delta;
      $form['field_locations']['widget'][$delta]['value']['#weight'] = $delta;
    }
    $form['field_locations']['widget'][$delta]['value']['#default_value'] = $value;
  }

  $form['field_position_number']['widget'][0]['value']['#default_value'] = $job_values->position_number;

  if (!empty($job_values->clearance_level)) {
    $current_clearance_levels = [];
    foreach ($job_values->clearance_level as $delta => $aps_tid) {
      $current_clearance_levels[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
    }
    $form['field_clearance_levels']['widget']['#default_value'] = $current_clearance_levels;
  }

  $form['field_salary_min']['widget'][0]['value']['#default_value'] = $job_values->salary_from;

  $form['field_salary_max']['widget'][0]['value']['#default_value'] = $job_values->salary_to;

  $current_wh = [];
  foreach ($job_values->working_hours as $delta => $aps_tid) {
    $current_wh[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $form['field_working_hours']['widget']['#default_value'] = $current_wh;

  $current_et = [];
  foreach ($job_values->engagement_types as $delta => $aps_tid) {
    $current_et[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $form['field_engagement_types']['widget']['#default_value'] = $current_et;

  $current_ip = [];
  foreach ($job_values->initiatives_and_programs as $delta => $aps_tid) {
    $current_ip[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $form['field_initiatives_and_programs']['widget']['#default_value'] = $current_ip;

  $form['field_duties']['widget'][0]['#default_value'] = $job_values->duties;
  $form['field_eligibility']['widget'][0]['#default_value'] = $job_values->eligibility;
  $form['field_notes']['widget'][0]['#default_value'] = $job_values->notes;

  if ($job_values->under_7_days_check) {
    $form['field_under_7_days_check']['widget']['value']['#default_value'] = TRUE;
  }

  $time = strtotime($job_values->closing_date->date);
  $closing_date = DrupalDateTime::createFromTimestamp($time);
  $form['field_closing_date']['widget'][0]['value']['#default_value'] = $closing_date;

  $form['field_apply_url']['widget'][0]['value']['#default_value'] = $job_values->apply_url;
  $form['field_contact_name']['widget'][0]['value']['#default_value'] = $job_values->contact_name;
  $form['field_contact_phone']['widget'][0]['value']['#default_value'] = $job_values->contact_phone;
  $form['field_contact_email']['widget'][0]['value']['#default_value'] = $job_values->contact_email;
  $form['field_editorial_instruction']['widget'][0]['value']['#default_value'] = $job_values->editorial_instruction;
  $form['field_approver']['widget'][0]['value']['#default_value'] = $job_values->approvers;
  $form['field_moderation']['widget']['#default_value'] = $job_values->moderation;

  return $aps_id;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function govcms_jobs_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  if ($bundle === 'govcms_jobs') {
    if (isset($fields['field_publication_date'])) {
      $fields['field_publication_date']->addConstraint('GovcmsJobsPubDateConstraint', []);
    }
    if (isset($fields['field_closing_date'])) {
      $fields['field_closing_date']->addConstraint('GovcmsJobsCloseDateConstraint', []);
    }
    if (isset($fields['field_contact_phone'])) {
      $fields['field_contact_phone']->addConstraint('GovcmsJobsAuPhoneConstraint', []);
    }
  }
}

/**
 * Set dynamic allowed values for the agencies field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function govcms_jobs_field_agencies_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $connection = \Drupal::database();
  $query = $connection->select('govcms_jobs_mapping', 'm')
  ->condition('type', 'agency')
  ->fields('m');
  $result = $query->execute()->fetchAll();
  $options = [];
  foreach ($result as $value) {
    $data = json_decode($value->data);
    if ($data->status) {
      $options[$value->aps_id] = $data->title;
    }
  }
  asort($options);

  return $options;
}

/**
 * govcms_jobs_get_json_data_from_node.
 */
function govcms_jobs_get_json_data_from_node($node) {
  $data = array();
  $data['type'] = 'aps_vacancies';
  $time = $node->get('field_publication_date')->getValue();
  $time = strtotime($time[0]['value']);
  $time = date('D M d, Y',$time);
  $data['publication_date']['date'] = $time;
  $data['broadband'] = $node->get('field_broadband')->getValue()[0]['value'];

  $data['job_level']= null;
  foreach ($node->get('field_job_levels')->getValue() as $key => $value) {
    $data['job_level'][] = govcms_jobs_get_aps_id_from_current_id('taxonomy', $value['target_id']);
  }

  $data['agency'] = null;
  foreach ($node->get('field_agencies')->getValue() as $key => $value) {
    $data['agency'][] = $value['value'];
  }

  $data['considered_rr'] = $node->get('field_considered_rr')->getValue()[0]['value'];
  $data['job_title'] = $node->get('title')->getValue()[0]['value'];
  $data['job_category'] = null;
  foreach ($node->get('field_job_categories')->getValue() as $key => $value) {
    $data['job_category'][] = govcms_jobs_get_aps_id_from_current_id('taxonomy', $value['target_id']);
  }
  $data['locations'] = null;
  foreach ($node->get('field_locations')->getValue() as $key => $value) {
    $data['locations'][] = $value['value'];
  }
  $data['position_number'] = $node->get('field_position_number')->getValue()[0]['value'];
  $data['clearance_level'] = null;
  foreach ($node->get('field_clearance_levels')->getValue() as $key => $value) {
    $data['clearance_level'][] = govcms_jobs_get_aps_id_from_current_id('taxonomy', $value['target_id']);
  }
  $data["salary_type"] ="annually";
  $data['salary_from'] = !empty($node->get('field_salary_min')->getValue()) ? $node->get('field_salary_min')->getValue()[0]['value'] : '';
  $data['salary_to'] = !empty($node->get('field_salary_max')->getValue()) ? $node->get('field_salary_max')->getValue()[0]['value'] : '';

  $data['working_hours'] = null;
  foreach ($node->get('field_working_hours')->getValue() as $key => $value) {
    $data['working_hours'][] = govcms_jobs_get_aps_id_from_current_id('taxonomy', $value['target_id']);
  }
  $data['engagement_types'] = null;
  foreach ($node->get('field_engagement_types')->getValue() as $key => $value) {
    $data['engagement_types'][] = govcms_jobs_get_aps_id_from_current_id('taxonomy', $value['target_id']);
  }

  $data['initiatives_and_programs'] = null;
  foreach ($node->get('field_initiatives_and_programs')->getValue() as $key => $value) {
    $data['initiatives_and_programs'][] = govcms_jobs_get_aps_id_from_current_id('taxonomy', $value['target_id']);
  }

  $data['duties'] = $node->get('field_duties')->getValue()[0]['value'];
  $data['eligibility'] = !empty($node->get('field_eligibility')->getValue())?$node->get('field_eligibility')->getValue()[0]['value']:null;
  $data['notes'] = !empty($node->get('field_notes')->getValue())? $node->get('field_notes')->getValue()[0]['value']:null;

  $time = $node->get('field_closing_date')->getValue();
  $time = strtotime($time[0]['value']);
  $data['closing_date']= array('date' => date('D M d, Y', $time), 'time'=> date('h:m',$time));
  $data['under_7_days_check'] = $node->get('field_under_7_days_check')->getValue()[0]['value'];
  $data['apply_url'] = !empty($node->get('field_apply_url')->getValue())?$node->get('field_apply_url')->getValue()[0]['value']:null;
  $data['contact_name'] = !empty($node->get('field_contact_name')->getValue())?$node->get('field_contact_name')->getValue()[0]['value']:null;
  $data['contact_number'] = $node->get('field_contact_phone')->getValue()[0]['value'];
  $data['contact_email'] = !empty($node->get('field_contact_email')->getValue() )?$node->get('field_contact_email')->getValue()[0]['value']:null;
  $data['approver'] = !empty($node->get('field_approver')->getValue() )?$node->get('field_approver')->getValue()[0]['value']:null;
  $data['moderation'] = $node->get('field_moderation')->getValue()[0]['value'];
  $json = json_encode($data);

  return $json;
}

function govcms_jobs_update_node_by_json_data($nid, $values) {
  $node = Node::load($nid);

  //Agency
  $node->field_publication_date->value = date('Y-m-d\TH:i:s', strtotime($values->publication_date->date));
  $node->field_broadband->value = $values->broadband;
  $tids = [];
  foreach ($values->job_level as $delta => $aps_tid) {
    $tids[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $node->field_job_levels = $tids;
  $node->field_agencies = $values->agency;
  $node->field_considered_rr->value = $values->considered_rr;

  //Position
  $node->title->value = $values->job_title;
  $tids = [];
  foreach ($values->job_category as $delta => $aps_tid) {
    $tids[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $node->field_job_categories = $tids;
  $node->field_locations = $values->locations;
  $node->field_position_number->value = $values->position_number;
  $tids = [];
  foreach ($values->clearance_level as $delta => $aps_tid) {
    $tids[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $node->field_clearance_levels = $tids;
  $node->field_salary_min->value = $values->salary_from;
  $node->field_salary_max->value = $values->salary_to;
  $tids = [];
  foreach ($values->working_hours as $delta => $aps_tid) {
    $tids[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $node->field_working_hours = $tids;
  $tids = [];
  foreach ($values->engagement_types as $delta => $aps_tid) {
    $tids[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $node->field_engagement_types = $tids;
  $tids = [];
  foreach ($values->initiatives_and_programs as $delta => $aps_tid) {
    $tids[] = govcms_jobs_get_mapped_id('taxonomy', $aps_tid);
  }
  $node->field_initiatives_and_programs = $tids;

  // Duties
  $node->field_duties->value = $values->duties;
  $node->field_eligibility->value = $values->eligibility;
  $node->field_notes->value = $values->notes;

  // Notice details
  $node->field_under_7_days_check->value = $values->under_7_days_check;
  $node->field_closing_date->value = date('Y-m-d\TH:i:s', strtotime($values->closing_date->date));
  $node->field_apply_url->value = $values->apply_url;
  $node->field_contact_name->value = $values->contact_name;
  if (!empty($values->contact_phone)) {
    $node->field_contact_phone->value = $values->contact_phone;
  }
  $node->field_contact_email->value = $values->contact_email;
  if (!empty($values->editorial_instruction)) {
    $node->field_editorial_instruction->value = $values->editorial_instruction;
  }

  // Submit
  if (!empty($values->approvers)) {
    $node->field_approver->value = $values->approvers;
  }
  $node->field_moderation->value = $values->moderation;

  $node->save();
}
